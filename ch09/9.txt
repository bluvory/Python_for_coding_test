# 최단 경로 알고리즘 Shortest Path Algorithm
# 가장 짧은 경로를 찾는 알고리즘
# 다익스트라 알고리즘 : 한 지점에서 다른 특정 지점까지의 최단 경로를 구해야 하는 경우 (그리디 알고리즘)
# 플로이드 워셜 알고리즘 : 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우 (다이나믹 프로그래밍)


## 다익스트라 Dijkstra 최단 경로 알고리즘 ##
# 여러 개의 노드가 있을 때 특정한 노드에서 출발하여 다른 노드로 하는 각각의 최단 경로를 구해주는 알고리즘
# '각 노드에 대한 현재까지의 최단 거리' 정보 리스트를 갱신
# 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것

# 방법1. 간단한 다익스트라 알고리즘
# 단계마다 '방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택'하기 위해 매 단계마다 1차원 리스트의 모든 원소를 확인(순차탐색)
# 시간 복잡도 : O(V**2)

# 방법2. 개선된 다익스트라 알고리즘
# 우선순위 큐를 이용해서 시작 노드로부터 '거리'가 짧은 노드 순서대로 큐에서 나올 수 있도록 다익스트라 알고리즘 작성
# 현재 가장 가까운 노드를 저장하기 위한 목적으로만 우선순위 큐를 추가로 이용
# 우선순위 큐에서 노드를 꺼낸 뒤에 해당 노드를 이미 처리한 적이 있다면 무시하고 아직 처리하지 않은 노드에 대해서만 처리
# 시간 복잡도 : O(ElogV)

# 힙(Heap) 자료구조 사용
# 특정 노드까지의 최단 거리에 대한 정보를 힙에 담아서 처리하므로 출발 노드로부터 가장 거리가 짧은 노드를 더욱 빠르게 찾을 수 있다

# 우선순위 큐 Priority Queue
# 우선순위가 가장 높은 데이터를 가장 먼저 삭제
# 라이브러리 : PriorityQueue, heapq
# 시간복잡도 : O(logN)

# 최소 힙 Min Heap
# 값이 낮은 데이터가 먼저 삭제
# 최대 힙 Max Heap
# 값이 높은 데이터가 먼저 삭제


## 플로이드 워셜 알고리즘 Floyd-Warshall Algorithm ##
# 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해주는 알고리즘
# 2차원 리스트에 '최단 거리' 정보 저장
# '바로 이동하는 거리'가 '특정한 노드를 거쳐서 이동하는 거리'보다 더 많은 비용을 가진다면 이를 더 짧은 것으로 갱신
# D_ab = min(D_ab, D_ak + D_kb)
# 시간 복잡도 : O(N**3)

